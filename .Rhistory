colorscale = custom_colorscale,  # Use the converted viridis color scale
size = 5)) %>%
layout(
title = list(
#Title Format = Deployment ID Deployment Trip Processed Track Data
text = paste0("Aggregated and Processed Track Data"),
y = 0.85,  # Adjust title position vertically (0-1 range)
yanchor = "top"  # Optional: Anchor title position to the top
),
geo = list(
projection = list(type = 'natural earth'),
showland = TRUE,
resolution = 50, # Country level resolution for map
landcolor = "gray",
#Set the initial view/extent of the map output
lonaxis = list(
range = c(-230, -60)  # Longitude range from east coasts of US to Japan
),
lataxis = list(
range = c(15, 70) # Latitude range to cover relevant area
)
),
#Set the whitespace margins
margin = list(
l = 10,  # Left margin (adjust as needed)
r = 10 # Right margin (adjust as needed)
),
legend = list(
title = list(text = 'Seal ID')  # Add legend title
))
Tracks_map
library(RColorBrewer)
# Calculate the number of unique SealID values
unique_seal_ids <- length(unique(Tracks$SealID))
# Generate a color palette with RColorBrewer
palette <- brewer.pal(min(unique_seal_ids, 12), "Set3")
# Function to convert RColorBrewer palette to Plotly format
brewer_to_plotly <- function(palette) {
n <- length(palette)
lapply(seq_along(palette), function(i) list((i - 1) / (n - 1), palette[i]))
}
# Convert the color palette to Plotly format
colorscale <- brewer_to_plotly(palette)
#Plot the tracking data using the track dataframe
Tracks_map <- plot_ly(data = Tracks,
type = 'scattergeo',
mode = 'markers',
split = ~SealID,
lat = ~Lat,
lon = ~Lon,
#Formatting for the hover labels
#Hover label format =
#  Lat: YY.YYY
#  Lon: -XXX.XXX
#  Date-Time: YYYY-MM-DD HH:MM:SS
text = ~paste(
"Lat: ", sprintf("%.3f", Lat), "°",
"<br>Lon: ", sprintf("%.3f", Lon), "°",
"<br>Date-Time: ", Date),
hoverinfo = 'text',
#Formatting for data points and how they are colored
marker = list(
#Use the Julian Date-Time object to set the sequence
color = ~SealID,
colorscale = custom_colorscale,  # Use the converted viridis color scale
size = 5)) %>%
layout(
title = list(
#Title Format = Deployment ID Deployment Trip Processed Track Data
text = paste0("Aggregated and Processed Track Data"),
y = 0.85,  # Adjust title position vertically (0-1 range)
yanchor = "top"  # Optional: Anchor title position to the top
),
geo = list(
projection = list(type = 'natural earth'),
showland = TRUE,
resolution = 50, # Country level resolution for map
landcolor = "gray",
#Set the initial view/extent of the map output
lonaxis = list(
range = c(-230, -60)  # Longitude range from east coasts of US to Japan
),
lataxis = list(
range = c(15, 70) # Latitude range to cover relevant area
)
),
#Set the whitespace margins
margin = list(
l = 10,  # Left margin (adjust as needed)
r = 10 # Right margin (adjust as needed)
),
legend = list(
title = list(text = 'Seal ID')  # Add legend title
))
Tracks_map
#Plot the tracking data using the track dataframe
Tracks_map <- plot_ly(data = Tracks,
type = 'scattergeo',
mode = 'markers',
split = ~SealID,
lat = ~Lat,
lon = ~Lon,
#Formatting for the hover labels
#Hover label format =
#  Lat: YY.YYY
#  Lon: -XXX.XXX
#  Date-Time: YYYY-MM-DD HH:MM:SS
text = ~paste(
"Lat: ", sprintf("%.3f", Lat), "°",
"<br>Lon: ", sprintf("%.3f", Lon), "°",
"<br>Date-Time: ", Date),
hoverinfo = 'text',
#Formatting for data points and how they are colored
marker = list(
#Use the Julian Date-Time object to set the sequence
color = ~SealID,
colorscale = colorscale,  # Use the converted viridis color scale
size = 5)) %>%
layout(
title = list(
#Title Format = Deployment ID Deployment Trip Processed Track Data
text = paste0("Aggregated and Processed Track Data"),
y = 0.85,  # Adjust title position vertically (0-1 range)
yanchor = "top"  # Optional: Anchor title position to the top
),
geo = list(
projection = list(type = 'natural earth'),
showland = TRUE,
resolution = 50, # Country level resolution for map
landcolor = "gray",
#Set the initial view/extent of the map output
lonaxis = list(
range = c(-230, -60)  # Longitude range from east coasts of US to Japan
),
lataxis = list(
range = c(15, 70) # Latitude range to cover relevant area
)
),
#Set the whitespace margins
margin = list(
l = 10,  # Left margin (adjust as needed)
r = 10 # Right margin (adjust as needed)
),
legend = list(
title = list(text = 'Seal ID')  # Add legend title
))
Tracks_map
#Plot the tracking data using the track dataframe
Tracks_map <- plot_ly(data = Tracks,
type = 'scattergeo',
mode = 'markers',
split = ~SealID,
lat = ~Lat,
lon = ~Lon,
#Formatting for the hover labels
#Hover label format =
#  Lat: YY.YYY
#  Lon: -XXX.XXX
#  Date-Time: YYYY-MM-DD HH:MM:SS
text = ~paste(
"Seal ID: ", SealID,
"<br>Deployment ID: ", TOPPID,
"<br>Lat: ", sprintf("%.3f", Lat), "°",
"<br>Lon: ", sprintf("%.3f", Lon), "°",
"<br>Date-Time: ", Date),
hoverinfo = 'text',
#Formatting for data points and how they are colored
marker = list(
#Use the Julian Date-Time object to set the sequence
color = ~SealID,
colorscale = colorscale,  # Use the converted viridis color scale
size = 5)) %>%
layout(
title = list(
#Title Format = Deployment ID Deployment Trip Processed Track Data
text = paste0("Aggregated and Processed Track Data"),
y = 0.85,  # Adjust title position vertically (0-1 range)
yanchor = "top"  # Optional: Anchor title position to the top
),
geo = list(
projection = list(type = 'natural earth'),
showland = TRUE,
resolution = 50, # Country level resolution for map
landcolor = "gray",
#Set the initial view/extent of the map output
lonaxis = list(
range = c(-230, -60)  # Longitude range from east coasts of US to Japan
),
lataxis = list(
range = c(15, 70) # Latitude range to cover relevant area
)
),
#Set the whitespace margins
margin = list(
l = 10,  # Left margin (adjust as needed)
r = 10 # Right margin (adjust as needed)
),
legend = list(
title = list(text = 'Seal ID')  # Add legend title
))
Tracks_map
#Plot the tracking data using the track dataframe
Tracks_map <- plot_ly(data = Tracks,
type = 'scattergeo',
mode = 'markers',
split = ~SealID,
lat = ~Lat,
lon = ~Lon,
#Formatting for the hover labels
#Hover label format =
#  Lat: YY.YYY
#  Lon: -XXX.XXX
#  Date-Time: YYYY-MM-DD HH:MM:SS
text = ~paste(
"Seal ID: ", SealID,
"<br>Deployment ID: ", TOPPID,
"<br>Lat: ", sprintf("%.3f", Lat), "°",
"<br>Lon: ", sprintf("%.3f", Lon), "°",
"<br>Date-Time: ", Date),
hoverinfo = 'text',
#Formatting for data points and how they are colored
marker = list(
color = ~SealID,
size = 5)) %>%
layout(
title = list(
#Title Format = Deployment ID Deployment Trip Processed Track Data
text = paste0("Aggregated and Processed Track Data"),
y = 0.85,  # Adjust title position vertically (0-1 range)
yanchor = "top"  # Optional: Anchor title position to the top
),
geo = list(
projection = list(type = 'natural earth'),
showland = TRUE,
resolution = 50, # Country level resolution for map
landcolor = "gray",
#Set the initial view/extent of the map output
lonaxis = list(
range = c(-230, -60)  # Longitude range from east coasts of US to Japan
),
lataxis = list(
range = c(15, 70) # Latitude range to cover relevant area
)
),
#Set the whitespace margins
margin = list(
l = 10,  # Left margin (adjust as needed)
r = 10 # Right margin (adjust as needed)
),
legend = list(
title = list(text = 'Seal ID')  # Add legend title
))
Tracks_map
#Plot the tracking data using the track dataframe
Tracks_map <- plot_ly(data = Tracks,
type = 'scattergeo',
mode = 'markers',
split = ~SealID,
lat = ~Lat,
lon = ~Lon,
#Formatting for the hover labels
#Hover label format =
#  Lat: YY.YYY
#  Lon: -XXX.XXX
#  Date-Time: YYYY-MM-DD HH:MM:SS
text = ~paste(
"Seal ID: ", SealID,
"<br>Deployment ID: ", TOPPID,
"<br>Lat: ", sprintf("%.3f", Lat), "°",
"<br>Lon: ", sprintf("%.3f", Lon), "°",
"<br>Date-Time: ", Date),
hoverinfo = 'text',
#Formatting for data points and how they are colored
marker = list(
color = ~SealID,
size = 5)) %>%
layout(
title = list(
#Title Format = Deployment ID Deployment Trip Processed Track Data
text = paste0("Aggregated and Processed Track Data"),
y = 0.85,  # Adjust title position vertically (0-1 range)
yanchor = "top"  # Optional: Anchor title position to the top
),
geo = list(
projection = list(type = 'natural earth'),
showland = TRUE,
resolution = 50, # Country level resolution for map
landcolor = "gray",
#Set the initial view/extent of the map output
lonaxis = list(
range = c(-230, -60)  # Longitude range from east coasts of US to Japan
),
lataxis = list(
range = c(15, 70) # Latitude range to cover relevant area
)
),
#Set the whitespace margins
margin = list(
l = 10,  # Left margin (adjust as needed)
r = 10 # Right margin (adjust as needed)
),
legend = list(
title = list(text = 'Seal ID'),  # Add legend title
y = 0.5,  # Vertically center the legend
yanchor = 'middle'  # Anchor the legend at its middle
))
Tracks_map
#Plot the tracking data using the Tracks aggregated dataframe
Tracks_map <- plot_ly(data = Tracks,
type = 'scattergeo',
mode = 'markers',
split = ~SealID,
lat = ~Lat,
lon = ~Lon,
#Formatting for the hover labels
#Hover label format =
#  Lat: YY.YYY
#  Lon: -XXX.XXX
#  Date-Time: YYYY-MM-DD HH:MM:SS
text = ~paste(
"Seal ID: ", SealID,
"<br>Deployment ID: ", TOPPID,
"<br>Lat: ", sprintf("%.3f", Lat), "°",
"<br>Lon: ", sprintf("%.3f", Lon), "°",
"<br>Date-Time: ", Date),
hoverinfo = 'text',
#Formatting for data points and how they are colored
marker = list(
color = ~SealID,
size = 5)) %>%
layout(
title = list(
#Title Format = Deployment ID Deployment Trip Processed Track Data
text = paste0("Aggregated and Processed Track Data"),
y = 0.85,  # Adjust title position vertically (0-1 range)
yanchor = "top"  # Optional: Anchor title position to the top
),
geo = list(
projection = list(type = 'natural earth'),
showland = TRUE,
resolution = 50, # Country level resolution for map
landcolor = "gray",
#Set the initial view/extent of the map output
lonaxis = list(
range = c(-230, -60)  # Longitude range from east coasts of US to Japan
),
lataxis = list(
range = c(15, 70) # Latitude range to cover relevant area
)
),
#Set the whitespace margins
margin = list(
l = 10,  # Left margin (adjust as needed)
r = 10 # Right margin (adjust as needed)
),
legend = list(
title = list(text = 'Seal ID'),  # Add legend title
y = 0.5,  # Vertically center the legend
yanchor = 'middle'  # Anchor the legend at its middle
))
Tracks_map
#Plot the tracking data using the Tracks aggregated dataframe
Tracks_map <- plot_ly(data = Tracks,
type = 'scattergeo',
mode = 'markers',
split = ~SealID,
lat = ~Lat,
lon = ~Lon,
#Formatting for the hover labels
#Hover label format =
#  Lat: YY.YYY
#  Lon: -XXX.XXX
#  Date-Time: YYYY-MM-DD HH:MM:SS
text = ~paste(
"Seal ID: ", SealID,
"<br>Deployment ID: ", TOPPID,
"<br>Lat: ", sprintf("%.3f", Lat), "°",
"<br>Lon: ", sprintf("%.3f", Lon), "°",
"<br>Date-Time: ", Date),
hoverinfo = 'text',
#Formatting for data points and how they are colored
marker = list(
colorscale = ~SealID,
size = 5)) %>%
layout(
title = list(
#Title Format = Deployment ID Deployment Trip Processed Track Data
text = paste0("Aggregated and Processed Track Data"),
y = 0.85,  # Adjust title position vertically (0-1 range)
yanchor = "top"  # Optional: Anchor title position to the top
),
geo = list(
projection = list(type = 'natural earth'),
showland = TRUE,
resolution = 50, # Country level resolution for map
landcolor = "gray",
#Set the initial view/extent of the map output
lonaxis = list(
range = c(-230, -60)  # Longitude range from east coasts of US to Japan
),
lataxis = list(
range = c(15, 70) # Latitude range to cover relevant area
)
),
#Set the whitespace margins
margin = list(
l = 10,  # Left margin (adjust as needed)
r = 10 # Right margin (adjust as needed)
),
legend = list(
title = list(text = 'Seal ID'),  # Add legend title
y = 0.5,  # Vertically center the legend
yanchor = 'middle'  # Anchor the legend at its middle
))
Tracks_map
#Plot processed dive record against time (2-D)
Dives_plot <- plot_ly(data = Dives, x = ~Date, y = ~Depth,
split = ~SealID,
type = 'scatter',
mode = 'markers',
#setting so that hover labels show full date-time data
text = ~paste("Date-Time: ", Date,
"<br>Depth: ", Depth, "m"),
hoverinfo = 'text',
#Formatting for data points and how they are colored
marker = list(
colorscale = ~SealID,
size = 5)) %>%
layout(
#Title of the plot will dynamically generate based on nc file info
#Format = "Deployment ID Deployment Trip Processed Dive Data"
title = paste0("Aggregated and Processed Dive Data"),
yaxis = list(title = "Depth (m)",
autorange = "reversed"), #more intuitive for interpreting depth
xaxis = list(title = "Date",
tickformat = "%d-%b"), #more readable than full date-time format
hoverlabel = list(
bgcolor = "white",  # Optional: Set background color of hover label
font = list(family = "Arial", size = 12))  # Optional: Customize font
)
Dives_plot
#Plot processed dive record on a cartesian (lat-long) grid
#Note this is readily done only for processed data and NOT for raw curated data
LatLong_TDR_P <- plot_ly(data = dive_P,
x = ~diveLon, y = ~diveLat, z = ~diveDepth,
type = 'scatter3d', mode = 'markers',
marker = list(
#Use the Julian Date-Time object to set the sequence
color = ~JDateTime,
# Use the converted viridis color scale
colorscale = colorscale,
colorbar = list(
# Specify tick values and labels in the color bar
tickvals = c(min(dive_P$JDateTime), max(dive_P$JDateTime)),
ticktext = c("trip start", "trip end"),  # Specify tick labels
len = 1  # Ensure color bar uses the full height
),
size = 3),
#setting so that hover labels show full date-time data
text = ~paste("Lat: ", diveLat,"°",
"<br>Lon: ", diveLon,"°",
"<br>Depth: ", diveDepth, "m"),
hoverinfo = 'text') %>%
layout(
scene = list(
xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Depth', autorange = "reversed")
),
#Title of the plot will dynamically generate based on nc file info
#Format = "Deployment ID Deployment Trip Processed 3D Dive Data"
title = paste0(Info_global_P$Deployment_ID, " ",
Info_global_P$Deployment_Trip, " Processed 3D Dive Data")
)
LatLong_TDR_P
#Plot processed dive records on a cartesian (lat-long) grid
#Note this is readily done only for processed data and NOT for raw curated data
Dives_plot <- plot_ly(data = Dives,
x = ~Lon,
y = ~Lat,
z = ~Depth,
split = ~SealID,
type = 'scatter3d',
mode = 'markers',
marker = list(
colorscale = ~SealID,
size = 3),
#setting so that hover labels show full date-time data
text = ~paste(
"Seal ID: ", SealID,
"<br>Deployment ID: ", TOPPID,
"<br>Depth: ", Depth, "m",
"<br>Duration: ", Duration, "min",
"<br>Lat: ", sprintf("%.3f", Lat), "°",
"<br>Lon: ", sprintf("%.3f", Lon), "°",
"<br>Date-Time: ", Date),
hoverinfo = 'text') %>%
layout(
scene = list(
xaxis = list(title = 'Longitude'),
yaxis = list(title = 'Latitude'),
zaxis = list(title = 'Depth', autorange = "reversed")
),
#Title of the plot will dynamically generate based on nc file info
#Format = "Deployment ID Deployment Trip Processed 3D Dive Data"
title = "Aggregated and Processed 3D Dive Data",
legend = list(
title = list(text = 'Seal ID'),  # Add legend title
y = 0.5,  # Vertically center the legend
yanchor = 'middle'  # Anchor the legend at its middle
))
Dives_plot
